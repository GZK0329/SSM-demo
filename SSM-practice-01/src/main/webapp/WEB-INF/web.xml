<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <!-- 编码过滤器 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- 配置DispatcherServlet -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 配置springMVC需要加载的配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-*.xml</param-value>
        </init-param>
        <!--
        load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其init()方法)
        当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet
        当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载
        正数的值越小，该servlet的优先级越高，应用启动时就越先加载
        当值相同时，容器就会自己选择顺序来加载
        -->
        <load-on-startup>1</load-on-startup>

        <!--async-supported
        web3.0新特性 作用是支持异步处理
        Servlet 3.0 之前，一个普通 Servlet 的主要工作流程大致如下：
        首先，Servlet 接收到请求之后，可能需要对请求携带的数据进行一些预处理；
        接着，调用业务接口的某些方法，以完成业务处理；
        最后，根据处理的结果提交响应，Servlet 线程结束。
        其中第二步的业务处理通常是最耗时的，这主要体现在数据库操作，以及其它的跨网络调用等，
        在此过程中，Servlet 线程一直处于阻塞状态，直到业务方法执行完毕。

        Servlet 3.0 针对这个问题做了开创性的工作，现在通过使用 Servlet 3.0 的异步处理支持，
        之前的 Servlet 处理流程可以调整为如下的过程：
        首先，Servlet 接收到请求之后，可能首先需要对请求携带的数据进行一些预处理；
        接着，Servlet 线程将请求转交给一个异步线程来执行业务处理，线程本身返回至容器，
        此时 Servlet 还没有生成响应数据，异步线程处理完业务以后，
        可以直接生成响应数据（异步线程拥有 ServletRequest 和 ServletResponse 对象的引用），
        或者将请求继续转发给其它 Servlet。
        如此一来，Servlet 线程不再是一直处于阻塞状态以等待业务逻辑的处理，
        而是启动异步线程之后可以立即返回。
        -->
        <async-supported>true</async-supported>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <!-- 匹配所有请求 -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
